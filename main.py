import streamlit as st
import pandas as pd
from datetime import datetime

# --- project imports ---
from scanner_module import load_nifty200, get_top10
from index_signals import generate_option_signal   # тЬЕ рдирд╡реАрди рдлрд╛рдИрд▓рдордзреВрди

# Optional helpers (рдЕрд╕рддреАрд▓ рддрд░ рд╡рд╛рдкрд░рд╛; рдирд╕рддреАрд▓ рддрд░ fallback)
try:
    from verdict_logic import get_trade_verdict
except Exception:
    def get_trade_verdict(rsi, macd, sector_trend) -> str:
        bull = (pd.to_numeric(pd.Series([rsi]), errors="coerce").iloc[0] or 0) > 55
        macd_ok = str(macd).strip().lower() == "bullish"
        sector_ok = str(sector_trend).strip().lower() in ("positive", "up", "bullish")
        return "рдЦрд░реЗрджреА" if (bull and macd_ok and sector_ok) else "рд╡рд┐рдХреНрд░реА/рдерд╛рдВрдмрд╛"

# ---------------- UI ----------------
st.set_page_config(page_title="ЁЯУИ рдорд░рд╛рдареА Trade with Suresh", layout="wide")
st.title("ЁЯУИ рдорд░рд╛рдареА Trade with Suresh")
st.caption(f"ЁЯФД рдЕрдкрдбреЗрдЯ рд╡реЗрд│: {datetime.now().strftime('%H:%M:%S')} IST")

# -------- Sidebar tuning for Index signals --------
st.sidebar.header("тЪЩя╕П Parameters")
entry_band = st.sidebar.slider("Entry band (тВ╣)", 1.0, 5.0, 2.0, 0.5)
target_pct = st.sidebar.slider("Target % of entry", 0.5, 1.5, 0.95, 0.05)
sl_pct     = st.sidebar.slider("SL % of entry", 0.3, 0.8, 0.58, 0.02)

# -------- Section 1: Nifty200 Intraday Scanner --------
st.subheader("ЁЯУК Nifty200 Intraday Scanner")

df = load_nifty200("Nifty200list.csv")
if df.empty:
    st.warning("тЪая╕П Nifty200list.csv рд╕рд╛рдкрдбрд▓реА рдирд╛рд╣реА рдХрд┐рдВрд╡рд╛ рд░рд┐рдХрд╛рдореА рдЖрд╣реЗ.")
else:
    # get_top10 internally handles rsi/macd/sector trend & scoring
    top10 = get_top10(df).copy()

    # Verdict column (рдЬрд░ verdict_logic рдЙрдкрд▓рдмреНрдз рдЕрд╕реЗрд▓ рддрд░)
    def _col(frame, name):
        for c in frame.columns:
            if c.lower() == name:
                return c
        return None

    rsi_col  = _col(top10, "rsi")
    macd_col = _col(top10, "macd")
    sect_col = _col(top10, "sector trend")

    if rsi_col and macd_col and sect_col:
        top10["Verdict"] = top10.apply(
            lambda row: get_trade_verdict(row[rsi_col], row[macd_col], row[sect_col]),
            axis=1
        )

    # Friendly display columns (рдЬреЗ рдЖрд╣реЗрдд рддреЗрдЪ рджрд╛рдЦрд╡рд╛)
    pref = ["stock", "sector", "rsi", "macd", "sector trend", "Verdict", "score"]
    show = [c for c in pref if c in top10.columns]
    st.dataframe(top10[show] if show else top10, use_container_width=True)

# -------- Section 2: Index Option Signals --------
st.subheader("ЁЯУК рдЖрдЬрдЪреЗ Index рд╕рдВрдХреЗрдд тАУ Options Trading рд╕рд╛рдареА")

# spot=None рдареЗрд╡рд▓рдВ рддрд░ рддреБрдордЪреНрдпрд╛ index_signals.generate_option_signal рдордзреНрдпреЗ
# рддреБрдореНрд╣реА рдЬреНрдпрд╛рдкреНрд░рдорд╛рдгреЗ logic рд▓рд┐рд╣рд┐рд▓рдВрдп рддреНрдпрд╛рдкреНрд░рдорд╛рдгреЗ рд╡рд╛рдкрд░рд╛.
# (рдЬрд░ рддреБрдордЪрд╛ generate_option_signal рд╕реНрдкреЙрдЯ рд╣рд╡рд╛рдЪ рдореНрд╣рдгрдд рдЕрд╕реЗрд▓, рддрд░ рдЦрд╛рд▓реАрд▓ dict рдордзреНрдпреЗ рд╕рдВрдЦреНрдпрд╛ рджреНрдпрд╛.)
indices = {
    "Nifty50":  25200,   # <- рд╣рд╡реЗ рдЕрд╕рд▓реНрдпрд╛рд╕ None рдХрд░рд╛ (auto) рдХрд┐рдВрд╡рд╛ actual spot рджреНрдпрд╛
    "BankNifty": 55200,
    "FinNifty":  23200,
}

for name, spot in indices.items():
    sig = generate_option_signal(name=name, spot=spot, side="CALL")
    # рдЬрд░ рддреБрдордЪреНрдпрд╛ index_signals рдордзреНрдпреЗ entry_band/target_pct/sl_pct parameters рдЕрд╕рддреАрд▓ рддрд░
    # generate_option_signal(...) рдордзреНрдпреЗ рддреЗрд╣реА рдкрд╛рд╕ рдХрд░реВ рд╢рдХрддрд╛.
    # рдЙрджрд╛.: generate_option_signal(name, spot, side="CALL", entry_band_inr=entry_band, target_pct=target_pct, sl_pct=sl_pct)

    # Render
    st.markdown(
        f"**{sig.get('name', name)} {sig.get('strike', '')} {sig.get('direction', '')}**  \n"
        f"Spot: тВ╣{sig.get('spot', spot)}  \n"
        f"Recommended Price: **тВ╣{sig.get('entry', sig.get('entry_low', 'тАФ'))}**  "
        f"(Band: {sig.get('entry_low', 'тАФ')}тАУ{sig.get('entry_high', 'тАФ')})  \n"
        f"ЁЯОп Target: **тВ╣{sig.get('target', 'тАФ')}**   |   ЁЯЫС SL: **тВ╣{sig.get('stoploss', 'тАФ')}**"
    )

st.caption("тД╣я╕П рд╢рд┐рдХреНрд╖рдгрд╛рд╕рд╛рдареА рдбреЗрдореЛ. Live trading рдЖрдзреА рд╕реНрд╡рддрдГрдЪреА рдкрдбрддрд╛рд│рдгреА рдХрд░рд╛.")
