import streamlit as st
import pandas as pd
import random
from datetime import datetime

# ЁЯУБ CSV path
CSV_PATH = "Nifty200list.csv"

# ЁЯУШ Trade direction logic
def get_trade_direction(rsi, macd, sector_trend):
    if rsi > 55 and macd.lower() == "bullish" and sector_trend.lower() == "positive":
        return "рдЦрд░реЗрджреА рдХрд░рд╛ тЬЕ"
    elif rsi < 45 and macd.lower() == "bearish" and sector_trend.lower() == "negative":
        return "рд╢реЙрд░реНрдЯ рд╕реЗрд▓ рдХрд░рд╛ тЭМ"
    else:
        return "рдлрдХреНрдд рдирд┐рд░реАрдХреНрд╖рдг рдХрд░рд╛ ЁЯСА"

# ЁЯФН Filter top 10 stocks
def filter_top_stocks(df):
    df.columns = df.columns.str.strip().str.lower()
    df["score"] = 0
    df.loc[df["rsi"] > 55, "score"] += 1
    df.loc[df["macd"] == "bullish", "score"] += 1
    df.loc[df["sector trend"] == "positive", "score"] += 1
    top10 = df.sort_values(by="score", ascending=False).head(10)
    return top10

# ЁЯУИ Index signal generator
def generate_index_signals():
    indices = {
        "Nifty50": 22450,
        "BankNifty": 48200,
        "Sensex": 74200,
        "Midcap": 37000,
        "Smallcap": 14500,
        "FinNifty": 21500
    }

    signals = []
    for name, spot in indices.items():
        strike = round(spot / 50) * 50 if "Nifty" in name else round(spot / 100) * 100
        direction = random.choice(["Call", "Put"])
        entry = random.randint(90, 180)
        target = entry + random.randint(30, 60)
        stoploss = entry - random.randint(20, 40)
        verdict = "рдЦрд░реЗрджреА рдХрд░рд╛ тЬЕ" if direction == "Call" else "рд╢реЙрд░реНрдЯ рд╕реЗрд▓ рдХрд░рд╛ тЭМ"

        signals.append({
            "Index": name,
            "Type": direction,
            "Strike": strike,
            "Premium": entry,
            "Target": target,
            "Stoploss": stoploss,
            "Verdict": verdict
        })
    return signals

# ЁЯЦея╕П Streamlit UI
st.set_page_config(page_title="ЁЯУК рдорд╛рдЭрд╛ рдЯреНрд░реЗрдбрд┐рдВрдЧ рд╕рд╛рдереА тАУ Suresh", layout="centered")
st.title("ЁЯУИ рдорд╛рдЭрд╛ рдЯреНрд░реЗрдбрд┐рдВрдЧ рд╕рд╛рдереА тАУ Suresh")
st.caption(f"ЁЯФД рдЕрдкрдбреЗрдЯ рд╡реЗрд│: {datetime.now().strftime('%H:%M:%S')} IST")

# ЁЯУВ Load CSV
try:
    df = pd.read_csv(CSV_PATH)
    st.success("тЬЕ Nifty200 CSV рдпрд╢рд╕реНрд╡реАрдкрдгреЗ рд▓реЛрдб рдЭрд╛рд▓реА!")
except FileNotFoundError:
    st.error("тЭМ CSV рдлрд╛рдИрд▓ рд╕рд╛рдкрдбрд▓реА рдирд╛рд╣реА. рдХреГрдкрдпрд╛ path рддрдкрд╛рд╕рд╛.")
    st.stop()

# ЁЯФН Top 10 stocks
top10 = filter_top_stocks(df)
top10["Verdict"] = top10.apply(
    lambda row: get_trade_direction(row["rsi"], row["macd"], row["sector trend"]),
    axis=1
)

# ЁЯУК Display Stock Table
st.subheader("ЁЯУМ рдЖрдЬрдЪреЗ Intraday Stocks тАУ Nifty200 рдордзреВрди")
st.dataframe(top10[["stock", "sector", "rsi", "macd", "sector trend", "Verdict"]], use_container_width=True)

# ЁЯУИ Display Index Signals
st.subheader("ЁЯУК рдЖрдЬрдЪреЗ Index рд╕рдВрдХреЗрдд тАУ рд╕рд░реНрд╡ рдкреНрд░рдореБрдЦ рдирд┐рд░реНрджреЗрд╢рд╛рдВрдХ")
index_signals = generate_index_signals()
for signal in index_signals:
    st.markdown(
        f"ЁЯТб **{signal['Index']} {signal['Type']} {signal['Strike']}**\n"
        f"ЁЯТ░ Premium: тВ╣{signal['Premium']} | ЁЯОп Target: тВ╣{signal['Target']} | ЁЯЫС SL: тВ╣{signal['Stoploss']} | ЁЯУв Verdict: {signal['Verdict']}"
    )






